// Define the database connection
datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// Generate Prisma client
generator client {
  provider = "prisma-client-js"
}

// User model
model User {
  id              Int       @id @default(autoincrement())
  full_name       String
  email           String    @unique
  phone_number    String    @unique
  password        String    // Hashed password
  profile_picture String?
  user_type       String    // Use a string field instead of enum (e.g., "Student", "Instructor")
  date_joined     DateTime  @default(now())
  balance         Decimal   @default(0)
  courses         Course[]  @relation("InstructorCourses")
  enrollments     Enrollment[]
  payments        Payment[]
  certifications  Certification[]
}

// Course model
model Course {
  id            Int             @id @default(autoincrement())
  title         String
  category      CourseCategory  @relation(fields: [category_id], references: [id])
  category_id   Int
  instructor    User            @relation("InstructorCourses", fields: [instructor_id], references: [id])
  instructor_id Int
  description   String
  level         String          // Use a string field instead of enum (e.g., "Beginner", "Intermediate", "Advanced")
  duration      Int
  price         Decimal
  certificate   Boolean
  course_url    String
  contents      CourseContent[]
  enrollments   Enrollment[]
  certifications Certification[] // Add this relation to fix the missing field error
}

// Course categories
model CourseCategory {
  id      Int     @id @default(autoincrement())
  name    String
  courses Course[]
}

// Content types
model CourseContent {
  id            Int      @id @default(autoincrement())
  course        Course   @relation(fields: [course_id], references: [id])
  course_id     Int
  content_type  String   // Use a string field instead of enum (e.g., "Video", "PDF")
  title         String
  url           String
  duration      Int
  order         Int
}

// Enrollment model
model Enrollment {
  id             Int           @id @default(autoincrement())
  user           User          @relation(fields: [user_id], references: [id], onUpdate: NoAction, onDelete: NoAction)
  user_id        Int
  course         Course        @relation(fields: [course_id], references: [id], onUpdate: NoAction, onDelete: NoAction)
  course_id      Int
  enrollment_date DateTime     @default(now())
  payment_status String        // Use a string field instead of enum (e.g., "Paid", "Pending", "Canceled")
}

// Payment model
model Payment {
  id             Int           @id @default(autoincrement())
  user           User          @relation(fields: [user_id], references: [id])
  user_id        Int
  payment_method PaymentMethod @relation(fields: [payment_method_id], references: [id])
  payment_method_id Int
  amount         Decimal
  transaction_id String
  payment_date   DateTime      @default(now())
  status         String        // Use a string field instead of enum (e.g., "Paid", "Pending", "Canceled")
}

model PaymentMethod {
  id    Int    @id @default(autoincrement())
  name  String
  payments Payment[]
}

// Certification model
model Certification {
  id               Int       @id @default(autoincrement())
  user             User      @relation(fields: [user_id], references: [id], onUpdate: NoAction, onDelete: NoAction)
  user_id          Int
  course           Course    @relation(fields: [course_id], references: [id], onUpdate: NoAction, onDelete: NoAction)
  course_id        Int
  certification_date DateTime @default(now())
  certificate_url  String
}

