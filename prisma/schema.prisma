datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum ContentType {
  NOTE
  VIDEO
  QUIZ
}

model User {
  id                Int           @id @default(autoincrement())
  email             String        @unique
  password          String
  role              Role          @default(STUDENT)
  name              String
  phone             String?       @unique
  isVerified        Boolean       @default(false)
  verificationToken String?       @unique
  refreshToken      String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  profile           Profile?
  courses           Course[]      @relation("InstructorCourses")
  enrollments       Enrollment[]
  payments          Payment[]
  certificates      Certificate[]
  messageSent       Message[]     @relation("SentMessages")
  messageReceived   Message[]     @relation("ReceivedMessages")
  earnings          Earning[]
  subscriptions     Subscription[]
  reviews           Review[]
  analytics         UserAnalytics[]
  wishlist          Wishlist[]
  notifications     Notification[]
  quizSubmissions   QuizSubmission[]
  @@index([email])
  @@index([phone])
}

model Profile {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  bio       String?
  avatar    String?
  userId    Int     @unique
  user      User    @relation(fields: [userId], references: [id])
}

model Course {
  id            Int               @id @default(autoincrement())
  title         String
  description   String?
  price         Float
  duration      Int
  category      String
  language      String
  level         String?
  imageUrl      String?
  instructorId  Int
  instructor    User              @relation("InstructorCourses", fields: [instructorId], references: [id])
  isPublished   Boolean           @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  enrollments   Enrollment[]
  contents      Content[]
  translations  CourseTranslation[]
  discounts     Discount[]
  certificates  Certificate[]
  reviews       Review[]
  analytics     CourseAnalytics[]
  wishlist      Wishlist[]
  tags          Tag[]
  @@index([instructorId])
}

model Content {
  id          Int         @id @default(autoincrement())
  courseId    Int
  course      Course      @relation(fields: [courseId], references: [id])
  title       String
  type        ContentType
  url         String?
  content     String?
  order       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  quizSubmissions QuizSubmission[]
  @@index([courseId])
}

model CourseTranslation {
  id          Int      @id @default(autoincrement())
  courseId    Int
  course      Course   @relation(fields: [courseId], references: [id])
  language    String
  title       String
  description String?
  category    String
  @@unique([courseId, language])
  @@index([courseId])
}

model Enrollment {
  id          Int       @id @default(autoincrement())
  studentId   Int
  student     User      @relation(fields: [studentId], references: [id])
  courseId    Int
  course      Course    @relation(fields: [courseId], references: [id])
  progress    Float     @default(0)
  enrolledAt  DateTime  @default(now())
  completedAt DateTime?
  payment     Payment?
  @@unique([studentId, courseId])
  @@index([studentId])
  @@index([courseId])
}

model Payment {
  id            Int           @id @default(autoincrement())
  amount        Float
  method        String
  transactionId String        @unique
  status        PaymentStatus @default(PENDING)
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  enrollmentId  Int           @unique
  enrollment    Enrollment    @relation(fields: [enrollmentId], references: [id])
  createdAt     DateTime      @default(now())
  @@index([userId])
}

model Certificate {
  id          Int      @id @default(autoincrement())
  studentId   Int
  student     User     @relation(fields: [studentId], references: [id])
  courseId    Int
  course      Course   @relation(fields: [courseId], references: [id])
  issuedAt    DateTime @default(now())
  downloadUrl String
  @@unique([studentId, courseId])
  @@index([studentId])
  @@index([courseId])
}

model Message {
  id          Int      @id @default(autoincrement())
  senderId    Int
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId  Int
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  content     String
  sentAt      DateTime @default(now())
  isRead      Boolean  @default(false)
  @@index([senderId])
  @@index([receiverId])
}

model Earning {
  id           Int      @id @default(autoincrement())
  instructorId Int
  instructor   User     @relation(fields: [instructorId], references: [id])
  amount       Float
  paymentId    Int
  withdrawn    Boolean  @default(false)
  createdAt    DateTime @default(now())
  @@index([instructorId])
}

model Tag {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  courses Course[] // Many-to-many relation
}

model Review {
  id          Int      @id @default(autoincrement())
  studentId   Int
  student     User     @relation(fields: [studentId], references: [id])
  courseId    Int
  course      Course   @relation(fields: [courseId], references: [id])
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
  @@unique([studentId, courseId])
  @@index([studentId])
  @@index([courseId])
}

model Subscription {
  id          Int                @id @default(autoincrement())
  userId      Int
  user        User               @relation(fields: [userId], references: [id])
  plan        String
  status      SubscriptionStatus @default(ACTIVE)
  startDate   DateTime           @default(now())
  endDate     DateTime
  paymentId   Int?
  createdAt   DateTime           @default(now())
  @@index([userId])
}

model UserAnalytics {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  action    String
  timestamp DateTime @default(now())
  metadata  Json?
  @@index([userId])
}

model CourseAnalytics {
  id          Int      @id @default(autoincrement())
  courseId    Int
  course      Course   @relation(fields: [courseId], references: [id])
  views       Int      @default(0)
  enrollments Int      @default(0)
  completions Int      @default(0)
  updatedAt   DateTime @updatedAt
  @@index([courseId])
}

model Discount {
  id        Int          @id @default(autoincrement())
  courseId  Int
  course    Course       @relation(fields: [courseId], references: [id])
  code      String       @unique
  type      DiscountType
  value     Float
  startDate DateTime
  endDate   DateTime
  createdAt DateTime     @default(now())
  @@index([courseId])
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  studentId Int
  student   User     @relation(fields: [studentId], references: [id])
  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id])
  addedAt   DateTime @default(now())
  @@unique([studentId, courseId])
  @@index([studentId])
  @@index([courseId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  @@index([userId])
}

model QuizSubmission {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  contentId   Int
  content     Content  @relation(fields: [contentId], references: [id])
  answers     Json
  score       Float
  submittedAt DateTime @default(now())
  @@unique([userId, contentId])
  @@index([userId])
  @@index([contentId])
}