datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum ContentType {
  NOTE
  VIDEO
  QUIZ
}

enum NotificationType {
  COURSE_COMPLETION
  NEW_CONTENT
  SYSTEM
  PROMOTIONAL
}

model User {
  id                Int              @id @default(autoincrement())
  email             String           @unique
  password          String
  role              Role             @default(STUDENT)
  name              String
  phone             String?          @unique
  isVerified        Boolean          @default(false)
  verificationToken String?          @unique
  refreshToken      String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  courses           Course[]         @relation("InstructorCourses")
  enrollments       Enrollment[]
  payments          Payment[]
  certificates      Certificate[]
  messageSent       Message[]        @relation("SentMessages")
  messageReceived   Message[]        @relation("ReceivedMessages")
  earnings          Earning[]
  reviews           Review[]
  notifications     Notification[]
  quizSubmissions   QuizSubmission[]
  progress          UserProgress[]

  @@index([email])
  @@index([phone])
}

model Course {
  id           Int            @id @default(autoincrement())
  title        String
  description  String?
  price        Float
  duration     Int
  category     String
  language     String
  level        String?
  imageUrl     String?
  instructorId Int
  instructor   User           @relation("InstructorCourses", fields: [instructorId], references: [id])
  isPublished  Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  enrollments  Enrollment[]
  contents     Content[]
  discounts    Discount[]
  payments     Payment[]
  certificates Certificate[]
  reviews      Review[]
  Notification Notification[]

  @@index([instructorId])
}

model Content {
  id              Int              @id @default(autoincrement())
  courseId        Int
  course          Course           @relation(fields: [courseId], references: [id])
  title           String
  type            ContentType
  url             String?
  content         String?
  order           Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  quizSubmissions QuizSubmission[]
  progress        UserProgress[]

  @@index([courseId])
}

model Enrollment {
  id           Int           @id @default(autoincrement())
  studentId    Int
  student      User          @relation(fields: [studentId], references: [id])
  courseId     Int
  course       Course        @relation(fields: [courseId], references: [id])
  progress     Float         @default(0)
  enrolledAt   DateTime      @default(now())
  completedAt  DateTime?
  payment      Payment?
  status       String        @default("ACTIVE")
  certificates Certificate[]

  @@unique([studentId, courseId])
  @@index([studentId])
  @@index([courseId])
}

model Payment {
  id            Int           @id @default(autoincrement())
  amount        Float
  method        String
  transactionId String        @unique
  status        PaymentStatus @default(PENDING)
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  courseId      Int
  course        Course        @relation(fields: [courseId], references: [id])
  receiptUrl    String?
  enrollmentId  Int?          @unique
  enrollment    Enrollment?   @relation(fields: [enrollmentId], references: [id])
  createdAt     DateTime      @default(now())
  earning       Earning[]
  earningId     Int?
  
  @@index([userId])
  @@index([courseId])
}

model UserProgress {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  contentId   Int
  content     Content   @relation(fields: [contentId], references: [id])
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())

  @@unique([userId, contentId])
  @@index([userId])
  @@index([contentId])
}

model Certificate {
  id           Int         @id @default(autoincrement())
  studentId    Int
  student      User        @relation(fields: [studentId], references: [id])
  courseId     Int
  course       Course      @relation(fields: [courseId], references: [id])
  enrollment   Enrollment? @relation(fields: [enrollmentId], references: [id])
  enrollmentId Int?        @unique
  issuedAt     DateTime    @default(now())
  certificateUrl  String

  @@unique([studentId, courseId])
  @@index([studentId])
  @@index([courseId])
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId Int
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  content    String
  sentAt     DateTime @default(now())
  isRead     Boolean  @default(false)

  @@index([senderId])
  @@index([receiverId])
}

model Earning {
  id          Int      @id @default(autoincrement())
  instructor  User     @relation(fields: [instructorId], references: [id])
  instructorId Int
  withdrawn   Boolean  @default(false)
  createdAt   DateTime @default(now())
  payment     Payment? @relation(fields: [paymentId], references: [id])
  paymentId   Int?
}

model Review {
  id        Int      @id @default(autoincrement())
  studentId Int
  student   User     @relation(fields: [studentId], references: [id])
  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  @@unique([studentId, courseId])
  @@index([studentId])
  @@index([courseId])
}

model Discount {
  id        Int          @id @default(autoincrement())
  courseId  Int
  course    Course       @relation(fields: [courseId], references: [id])
  code      String       @unique
  type      DiscountType
  value     Float
  startDate DateTime
  endDate   DateTime
  createdAt DateTime     @default(now())

  @@index([courseId])
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  user      User             @relation(fields: [userId], references: [id])
  courseId  Int?
  course    Course?          @relation(fields: [courseId], references: [id])
  title     String
  message   String
  type      NotificationType
  metadata  Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  readAt    DateTime?

  @@index([userId])
  @@index([courseId])
}

model QuizSubmission {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  contentId   Int
  content     Content  @relation(fields: [contentId], references: [id])
  answers     Json
  score       Float
  submittedAt DateTime @default(now())

  @@unique([userId, contentId])
  @@index([userId])
  @@index([contentId])
}
